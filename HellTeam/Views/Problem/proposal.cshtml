@model ChillLearn.ViewModels.ProposalDetailModel
@using ChillLearn;
@{
    ViewBag.Title = "Proposal Detail";
    Layout = "~/Views/Shared/StudentLayout.cshtml";
}
<style type="text/css">
    .selectBig {
        width: 60px;
        border: 1px solid #ced4da !important;
    }

    .select {
        border: 1px solid #ced4da !important;
        width: 60px;
        padding: 0px 5px;
    }

    #createClassDiv {
        display: none;
    }
</style>
<script type="text/javascript">
    var formInvalid = @ViewBag.FormInvalid;
    $(function () {
        var classType = $('input[name="SessionType"]:checked').val();
        AdjustForm(classType);

        setTimeout(function () {
            $('.text-danger').fadeOut();
        }, 3000);

        $('input[type=radio][name=SessionType]').change(function () {
            AdjustForm(this.value);
        });

         $('#DurationMinutes, #DurationHour').change(function () {
            var classHours = parseInt($('#DurationHour').val());
            var classMinutes = parseInt($('#DurationMinutes').val());
            if (classHours < 1) {
                if (classMinutes < 30) {
                    $('#msg-duration').text("@Resources.Resources.MsgClassDurationError");
                    $('#msg-duration').show();
                }
                else
                    $('#msg-duration').hide();
            }
         });

         $('#btnCreateClass').click(function () {
            $('#createClassDiv').slideToggle();
         });

        if (formInvalid == 1)
            $('#btnCreateClass').trigger('click');
    });

    function AdjustForm(classType) {
        if (classType == 2) {
            $('#div-record').addClass('hide');
            $('#div-classtime').addClass('hide');
            $('#div-timezone').addClass('hide');
            $('#div-classtimehour').addClass('hide');
            //$('#div-duration').addClass('hide');
        }
        else {
            $('#div-record').removeClass('hide');
            $('#div-classtime').removeClass('hide');
            $('#div-timezone').removeClass('hide');
            $('#div-classtimehour').removeClass('hide');
            //$('#div-duration').removeClass('hide');
        }
    }
</script>
<div class="row">
    <div class="col-md-12">
        @if (ViewData.ModelState["error"] != null)
        {
            <div class="alert alert-danger" role="alert">
                @Html.ValidationMessage("error")
            </div>
        }
        @if (ViewData.ModelState["success"] != null)
        {
            <div class="alert alert-success" role="alert">
                @Html.ValidationMessage("success")
            </div>
        }
        <div class="card pending-tutor-box">
            <div class="card-body p-t-10 p-b-10">
                <div class="row">
                    <div class="col-lg-6">
                        <h4>@Resources.Resources.TxtProblemDescription</h4>
                    </div>
                    @if ((Model.ProblemDetail.ProblemStatus == (int)ProblemStatus.Created || Model.ProblemDetail.ProblemStatus == (int)ProblemStatus.TeacherSelected) && (Model.ProblemDetail.Status != (int)(BidStatus.Offered) && Model.ProblemDetail.Status != (int)(BidStatus.Declined)))
                    {
                        using (Html.BeginForm("proposal", "problem", FormMethod.Post, new { enctype = "multipart/form-data", @class = "col-lg-6" }))
                        {
                            <div class="text-right">
                                <input id="btnCreateClass" type="button" name="accept" value="@Resources.Resources.LblAccept" class="btn btn-primary" />
                                <input type="submit" name="decline" value="@Resources.Resources.LblDecline" class="btn red" />
                            </div>
                        }
                    }
                    else if (Model.ProblemDetail.ClassType != null && Model.ProblemDetail.ClassType == 2 &&
                        Model.ProblemDetail.ClassStatus != (int)ClassStatus.Completed && Model.ProblemDetail.Status == (int)BidStatus.Accepted)
                    {
                        using (Html.BeginForm("completeclass", "problem", FormMethod.Post, new { enctype = "multipart/form-data", @class = "col-lg-6" }))
                        {
                            <div class="text-right">
                                <input type="hidden" name="bidID" value="@Model.BidId" />
                                <input type="hidden" name="classId" value="@Model.ProblemDetail.ClassID" />
                                <input type="submit" name="complete" value="@Resources.Resources.LblMarkComplete" class="btn btn-primary" />
                            </div>
                        }
                    }
                </div>
            </div>
            @if (Model.ProblemDetail.Status != (int)(BidStatus.Offered) && Model.ProblemDetail.Status != (int)(BidStatus.Declined))
            {
                <div id="createClassDiv" class="container">
                    @using (Html.BeginForm("proposal", "problem", FormMethod.Post, new { @id = "submitForm" }))
                    {
                        @Html.HiddenFor(model => model.ClassID)
                        @Html.HiddenFor(model => model.BidId)
                        @Html.HiddenFor(model => model.Subject)
                        @Html.HiddenFor(model => model.SessionType)
                        @Html.HiddenFor(model => model.ClassEndTime, new { @id = "end-time" })
                        <input type="hidden" name="ProblemID" value="@Model.ProblemDetail.ProblemID">
                        <input type="hidden" name="TeacherID" value="@Model.ProblemDetail.TeacherID">
                        <input type="hidden" name="BrainCertId" id="BrainCertId">
                        <div class="form-body">
                            <hr class="m-t-0 m-b-20">
                            <div class="form-row">
                                <div class="col-lg-12 mb-2 font-bold">
                                    @Resources.Resources.LblSubject: @Model.SubjectName
                                </div>
                                <div class="col-lg-12 mb-3 font-bold">
                                    @Resources.Resources.LblClassType: @Enum.GetName(typeof(SessionType), Model.SessionType)
                                </div>
                                <div class="col-lg-6 mb-3">
                                    <label for="validationCustom02">@Resources.Resources.LblTitle</label>
                                    @Html.TextBoxFor(model => model.Title, new { @class = "form-control", @placeholder = Resources.Resources.PlcTitle, @name = "title", @id = "clsTitle", @autofocus = "" })
                                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger", @required = "true" })
                                </div>
                                @if (Model.SessionType == (int)SessionType.Live)
                                {
                                    <div class="col-lg-6 mb-3" id="div-timezone">
                                        <label for="validationCustom01">@Resources.Resources.LblTimeZone</label>
                                        @Html.DropDownListFor(model => model.TimeZone, Model.TimeZones as SelectList, Resources.Resources.LblTimeZone, new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.TimeZone, "", new { @class = "text-danger" })
                                    </div>
                                }
                                <div class="col-lg-6 mb-3" id="div-duration">
                                    <label for="validationCustom02">@Resources.Resources.LblDuration</label>
                                    <div class="row">
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.DurationHour, Model.DurationHourList as SelectList, new { @class = "form-control selectBig pl-2" })
                                            <label>@Resources.Resources.LblHours</label>
                                            @Html.DropDownListFor(model => model.DurationMinutes, Model.DurationMinuteList as SelectList, new { @class = "form-control selectBig pl-2" })
                                            <label>@Resources.Resources.LblMinutes</label>
                                        </div>
                                    </div>
                                    @if (ViewData.ModelState["classtime-error"] != null)
                                    {
                                        <div class="text-danger" id="msg-duration">
                                            @Html.ValidationMessage("classtime-error")
                                        </div>
                                    }
                                </div>
                                @*<div class="col-lg-6 mb-3">
                                        <label for="validationCustom01">@Resources.Resources.LblSubject</label>
                                        @Html.DropDownListFor(model => model.Subject, Model.Subjects as SelectList, Resources.Resources.LblSelectSubject, new { @class = "form-control pl-1 select2" })
                                        @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-lg-12">
                                        <div class="credit-refund-block credit-refund-block-new">
                                            <label for="validationCustom01">@Resources.Resources.LblClassType</label>
                                            <div class="demo-radio-button text-left">
                                                @foreach (var item in Model.SessionTypes)
                                                {
                                                    @Html.RadioButtonFor(m => m.SessionType, item.Value, new { @class = "with-gap radio-col-pink", @id = "SessionType_" + item.Value })
                                                    <label for="SessionType_@item.Value">@item.Text</label>
                                                }
                                            </div>
                                            @Html.ValidationMessageFor(model => model.SessionType, "", new { @class = "text-danger" })
                                        </div>
                                    </div>*@

                                <div class="col-lg-12 mb-3">
                                    <label for="validationCustom02" class="mb-0">@(Model.SessionType == (int)SessionType.Live ? Resources.Resources.LblClassTime : Resources.Resources.TxtDeadline)</label>
                                    <div class="row">
                                        <div class="col-sm-5 mt-2">
                                            <div class="input-group" data-autoclose="true">
                                                @Html.TextBoxFor(model => model.Date, new { @placeholder = @Resources.Resources.PlcSelectDate, @class = "form-control", @id = "datepicker-autoclose" })
                                                <div class="input-group-append">
                                                    <span class="input-group-text"><i class="fa fa-calendar" aria-hidden="true"></i></span>
                                                </div>
                                            </div>
                                        </div>
                                        @if (Model.SessionType == (int)SessionType.Live)
                                        {
                                            <div class="col-sm-7 mt-2" id="div-classtimehour">
                                                @Html.DropDownListFor(model => model.ClassHour, Model.HourList as SelectList, new { @class = "form-control select" })
                                                @Html.DropDownListFor(model => model.ClassMinute, Model.MinuteList as SelectList, new { @class = "form-control select" })
                                                @Html.DropDownListFor(model => model.ClassAMPM, Model.AMPMList as SelectList, new { @class = "form-control select" })
                                            </div>
                                        }
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-lg-12 mb-3">
                                    <label for="validationCustom02">@Resources.Resources.LblDescription</label>
                                    @Html.TextAreaFor(model => model.Description, new { @maxlength = "1500", @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                </div>
                                @if (Model.SessionType == (int)SessionType.Live)
                                {
                                    <div class="col-lg-12 mb-3" id="div-record">
                                        <div class="credit-refund-block credit-refund-block-new">
                                            <h4 class="card-title  m-t-20 text-left">@Resources.Resources.TxtRecordClass</h4>
                                            <div class="demo-radio-button text-left">
                                                <input name="Record" type="radio" id="radio_30" class="with-gap radio-col-red" checked="" value="1">
                                                <label for="radio_30">@Resources.Resources.LblYes</label>
                                                <input name="Record" type="radio" id="radio_31" class="with-gap radio-col-pink" value="0">
                                                <label for="radio_31">@Resources.Resources.LblNo</label>
                                            </div>
                                            @Html.ValidationMessageFor(model => model.Record, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                }
                                @*<div class="col-lg-6 mb-3" id="div-record">
                                        <label for="validationCustom01">@Resources.Resources.TxtRecordClass</label>
                                        <select name="Record" class="form-control pl-1 select2">
                                            <option value="1">@Resources.Resources.LblYes</option>
                                            <option value="0">@Resources.Resources.LblNo</option>
                                        </select>
                                    </div>*@
                            </div>
                            <div class="form-row">
                                <div class="col-md-12 mb-3">
                                    <input type="submit" id="createClass" class="btn btn-primary float-right" value="@Resources.Resources.BtnCreateClass" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            <div>
                <hr class="m-t-0 m-b-5">
            </div>
            <div class="card-body p-t-0">
                <div class="table-responsive">
                    <table class="table vm no-th-brd pro-of-month manage-admin-list">
                        <tbody>
                            @if (Model != null && Model.ProblemDetail != null)
                            {
                                <tr>
                                    <td class="payment-text">

                                        <p>@Model.ProblemDetail.ProblemDescription</p>
                                        <div>
                                            <span class="text-muted">@Resources.Resources.LblSubject: @Model.ProblemDetail.SubjectName</span>
                                        </div>
                                        <div>
                                            <small class="text-muted">@Model.ProblemDetail.ProblemDate.Value.ToString("D")</small>
                                        </div>
                                        <br />
                                        @foreach (var file in Model.ProblemDetail.ProblemFiles)
                                        {
                                            <div class="mt-2">
                                                <u>
                                                    <a target="_blank" href="~/uploads/questionfiles/@file.FileName">@file.FileName</a>
                                                </u>
                                            </div>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td class="payment-text">
                                        <h4>@Model.ProblemDetail.UserName @Resources.Resources.TxtProposal</h4>
                                        <p>@Html.Raw(Model.ProblemDetail.TeacherResponse)</p>
                                        <small class="text-muted">@Model.ProblemDetail.ResponseDate.Value.ToString("D")</small>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td>@Resources.Resources.TxtNoDetailAvailable</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="ps-container teacher-block-inner">
                            <div style="max-height:500px; overflow-y:auto;" id="slimScrollChat">
                                @if (Model != null && Model.Messages != null)
                                {
                                    foreach (var msg in Model.Messages)
                                    {
                                        if (@HttpContext.Current.Session["UserId"].ToString() != msg.FromUser)
                                        {
                                            <div class="chat-message-box">
                                                @Html.Raw(@msg.Message1)
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="chat-message-box-skin">
                                                @Html.Raw(@msg.Message1)
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            @if (Model.ProblemDetail != null && Model.ProblemDetail.Status != (int)BidStatus.Declined)
                            {
                                <div class="row">
                                    <div class="type_msg col-md-12 m-t-10 m-b-10">
                                        @using (Html.BeginForm("BidResponse", "Problem", FormMethod.Post, new { enctype = "multipart/form-data" }))
                                        {
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <div class="input_msg_write">
                                                        @Html.HiddenFor(model => model.BidId)
                                                        @Html.TextAreaFor(model => model.Response, new { @class = "write_msg", @id = "mytextarea" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="row mt-2">
                                                <div class="col-lg-6">
                                                    <input type="file" name="files" multiple />
                                                </div>
                                                <div class="col-lg-6 text-right">
                                                    <input type="submit" class="btn btn-primary" value="@Resources.Resources.BtnSend" />
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.tiny.cloud/1/iplr5i26rxsh79m3r51j57ffqn3htgcsk6ob5w8lflieybpa/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script type="text/javascript">tinymce.init({ selector: '#mytextarea' });</script>
@*<script src="https://momentjs.com/downloads/moment-with-locales.js"></script>
    <script type="text/javascript">

        $('.timepicker').clockpicker({
            twelvehour: true,
            leadingSpaceAmPm: true,
            autoclose: false,
            donetext: 'Done'
        }).find('input').change(function () {
            var durationMinutes = $('#duration').val() * 60;
            if (durationMinutes > 30)
                durationMinutes = 30;
            var classEndTime = moment.utc(this.value, 'hh:mm A').add(durationMinutes, 'minutes').format('hh:mm A')
            $('#end-time').val(classEndTime);
        });

        $('#duration').change(function () {
            SetClassEndTime(this.value);
        });

        $('#duration').keyup(function () {
            SetClassEndTime(this.value);
        });

        function SetClassEndTime(duration) {
            var durationMinutes = this.value * 60;
            if (durationMinutes > 30)
                durationMinutes = 30;
            var classTime = $('#startTime').val();
            var classEndTime = moment.utc(classTime, 'hh:mm A').add(durationMinutes, 'minutes').format('hh:mm A')
            $('#end-time').val(classEndTime);
        }

    </script>*@